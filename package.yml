## Espanso openai package
## Query chat-gpt anywhere from your computer

# openai_chatgpt.py usage documentation

## Available **clipboard based commands**

# - `;clear-db`: Clear the chat history database.
# - `;ask`: Ask a question to ChatGPT.
# - `;debug`: Debug a code snippet.
# - `;respond`: Write a response.
# - `;code`: Write a code snippet with docs and examples.
# - `;snippet`: Return only the code without explanation (but include code docs).
# - `;previous-explain`: Explain the previous output in detail with examples.
# - `;explain`: Explain in detail a given topic or concept.
# - `;eli5`: Explain a given topic or concept like I'm 5 years old.
# - `;summarize`: Summarize a given text.
# - `;write`: Write an article on a given topic.
# - `;usage`: Generate usage documentation in markdown format.
# - `;grade`: Grade a given part of an essay on writing skills and suggest improvements.
# - `;rephrase`: Rephrase a given text.
# - `;correct`: Correct grammatical errors in a given text.
# - `;fact-check`: Check a given fact.

## Available **regex based command**

# - `;q/{query}//`: Ask a query to chatGPT

# ## Usage

# - To use any of the **clipboard based commands**, simply type the trigger phrase after copying your query to the clipboard.
# - To use the **regex based command**, simply replace `{query}` by your query.

global_vars:
  - name: "SCRIPT_PATH"
    type: "echo"
    params:
      echo: "\"$CONFIG/match/packages/openai/openai_chatgpt.py\""
  - name: "PYTHON_ENV"
    type: "shell"
    params:
      cmd: "echo ~/.virtualenvs/openai/bin/python3"

matches:
  - trigger: ";test-setup"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          cmd: "{{PYTHON_ENV}} {{SCRIPT_PATH}} -h"

  - trigger: ";ask"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          cmd: '{{PYTHON_ENV}} {{SCRIPT_PATH}} --clipboard_action "Answer this please" --system_role "A helpful assistant"'

  - trigger: ";debug"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          cmd: '{{PYTHON_ENV}} {{SCRIPT_PATH}} --clipboard_action "Debug this code" --system_role "A helpful and wise programmer"'

  - trigger: ";respond"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          cmd: '{{PYTHON_ENV}} {{SCRIPT_PATH}} --clipboard_action "Write a response to the following" --system_role "A helpful assistant"'

  - trigger: ";code"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          cmd: '{{PYTHON_ENV}} {{SCRIPT_PATH}} --clipboard_action "Write a code with docs and example for the following" --system_role "A wise and helpful programmer"'

  - trigger: ";snippet"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          cmd: '{{PYTHON_ENV}} {{SCRIPT_PATH}} --clipboard_action "Return only the code without explanation (but include code docs) for the following" --system_role "A helpful programmer"'

  - trigger: ";previous-explain"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          cmd: 'echo -n "" | pbcopy; {{PYTHON_ENV}} {{SCRIPT_PATH}} --clipboard_action "Explain the previous response in detail with examples" --system_role "A helpful assistant"'

  - trigger: ";clear-db"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          cmd: 'rm ~/openai_chatgpt/chats.db'

  - trigger: ";explain"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          cmd: '{{PYTHON_ENV}} {{SCRIPT_PATH}} --clipboard_action "Explain in detail" --system_role "A helpful assistant"'

  - trigger: ";eli5"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          cmd: '{{PYTHON_ENV}} {{SCRIPT_PATH}} --clipboard_action "Explain like I am 5" --system_role "A helpful assistant"'

  - trigger: ";summarize"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          cmd: '{{PYTHON_ENV}} {{SCRIPT_PATH}} --clipboard_action "Summarize" --system_role "A helpful assistant"'

  - trigger: ";write"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          cmd: '{{PYTHON_ENV}} {{SCRIPT_PATH}} --clipboard_action "Write an article on" --system_role "A helpful assistant"'

  - trigger: ";usage"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          cmd: '{{PYTHON_ENV}} {{SCRIPT_PATH}} --clipboard_action "Generate a usage doc in markdown format" --system_role "A helpful assistant"'


  - trigger: ";grade"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          cmd: '{{PYTHON_ENV}} {{SCRIPT_PATH}} --clipboard_action "Grade the following part of an essay on writing skills and suggest improvements" --system_role "A helpful assistant"'

  - trigger: ";rephrase"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          cmd: '{{PYTHON_ENV}} {{SCRIPT_PATH}} --clipboard_action "Rephrase the following" --system_role "A helpful assistant"'

  - trigger: ";correct"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          cmd: '{{PYTHON_ENV}} {{SCRIPT_PATH}} --clipboard_action "Correct grammatical errors in the following" --system_role "A helpful assistant"'

  # Lower temperature (0.2) used for fact checking.
  - trigger: ";fact-check"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          cmd: '{{PYTHON_ENV}} {{SCRIPT_PATH}} --clipboard_action "Check this fact" --system_role "A helpful assistant" --temperature 0.2'

  # Temperature (2.0) used for generating funny messages.
  - trigger: ";make-funny"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          cmd: 'echo -n "" | {{PYTHON_ENV}} {{SCRIPT_PATH}} --clipboard_action "Make this funny" --system_role "A funny poet" --temperature 2.0'

  - trigger: ";rhyme"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          cmd: 'echo -n "" | {{PYTHON_ENV}} {{SCRIPT_PATH}} --clipboard_action "Make it rhyme" --system_role "A funny poet"'

  # Regex based openai query
  # Low char limit because of Espanso's 30 character limit on regex.
  - regex: ";q/(?P<query>.*)//"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          cmd: 'echo -n "" | pbcopy; {{PYTHON_ENV}} {{SCRIPT_PATH}} --clipboard_action "{{query}}" --system_role "A helpful assistant"'